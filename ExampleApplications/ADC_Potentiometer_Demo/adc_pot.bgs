dim voltage           # The Potentiometer voltage

# Boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)

	# Configure P2_0 as output
	# Port          : 2 (The GPIO port - 2 since this is P2_0)
	# Pin Mode Mask : 0b00000001 = $01 (Set pin 0 to output)
	call hardware_io_port_config_direction(2, $01)
	
	# Set P2_0 pin LOW
	# Port          : 2
	# Pin Mode Mask : 0b00000001 = $01 (Hex) 
	# Logic Value   : 0b00000001 = $01 
	# 
	# NOTE: Logic Value is also a bitmask, not a 
	#       single 0/1 to apply to all selected pins
	call hardware_io_port_write(2, $01, $01)

	# Enable a timer interrupt for checking the potentiometer
	#
	# Arg 1 : Number of clock oscillations before interrupt
	# Arg 2 : Timer handle = 1
	# Arg 3 : Timer mode (0 = continuous, 1 = once-off)
	#
	# Note : The BLE module clocks oscillate at 32768Hz, so to set 
	#        the timer duration (Arg 1 ) using :
	#
	#        Arg 1 = (Timer Duration in seconds) * 32768
	#
	# We will use a 0.01 second interrupt so that the potentiometer 
	# changes reflect quickly, so
	#
	# Arg1 = 0.01 * 32768 = 327
	call hardware_set_soft_timer(327, 1, 0)
end

# Timer event listener
event hardware_soft_timer(handle)

	# Make sure that the correct timer 
	# triggered the interrupt
	if (handle = 1) then 
		# Read in the ADC value
		#
		# For all input arguments, see the Bluegiga API refernece at:
		#
		# https://www.bluegiga.com/en-US/products/software-bluegiga-bluetooth-smart/
		#
		# Arg 1 : Input      : Using analog input 6 
		# Arg 2 : Decimation : 3 (12 Bit resolution)
		# Arg 3 : Reference  : 0 (1.24V internal reference) 
		#
		# note : result will be 16 bits stored in msb and must be shifted 
		#        to be on the range [-2048, 2048].
		#        this must then be converted to the range [0, 100] to display
		#        the percentage of the potentiometer
		call hardware_adc_read(6, 3, 0)
	end if 	
end

# ADC event listener
event hardware_adc_result(input, value)
	
	# The result will be 16 bits stored left aligned and must be shifted 
	# to the right by 4 bits to be on the range [-2048, 2048].
	# 
	# This must then be converted to the range [0, 100] to display
	# the percentage of the potentiometer
	voltage = ( ( ( value >> 4 ) + 2048 ) / 4096 ) * 100

	# This will write a high to P2_0 if the potentiometer is above 50%
	# Change the 50% according to your needs 
	if ( voltage > 50 )
		# Output a HIGH
		call hardware_io_port_write(2, $01, $01)
	else 
		# Output a LOW
		call hardware_io_port_write(2, $01, $00)
	end if
end
