# ============================================================================================================== #
#               																								 #
# ADC-Pot Demo      : EVK2 WAB ADC and Potentiometer demo.	         											 #
#																												 #
# Description       : Demonstrates the use of the EVK WAB potentiometer and the									 #
#                     ADC to display the value of the potentiometer												 #
#																												 #
# Author            : Rob Clucas 																				 #
#																												 #
# Wiki Page	    	: Step by step explanation of the code can be found at :									 #
#																												 #
#                 	  https://github.com/X-Intellect/EVK2-WAB/wiki/Telit-----BLE-Communication-Example			 #
#																												 #
#                     Additionally, for other examples for the 													 #
#                     EVK2 WAB board, see the Wiki page at:														 #
#																												 #
#                     https://github.com/X-Intellect/EVK2-WAB/wiki/EVK2-WAB-Example-Applications				 #
#																												 #
#                     Or find the latest version of the source code at :										 #
#																												 #
#                     https://github.com/X-Intellect/EVK2-WAB/tree/master/ExampleApplications/Telit_BLE_Demo	 #
#																												 #
# ============================================================================================================== #
#                                                 CHANGELOG:													 #
# ============================================================================================================== #
#   																											 #
# 2015-06-18        : Initial release																			 #
#																												 #
# ============================================================================================================== #

dim voltage           # The Potentiometer voltage
dim thousands
dim hundreds
dim tens
dim ones
dim result(4)

# Boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)

	# Enable a timer interrupt for checking the potentiometer
	#
	# Arg 1 : Number of clock oscillations before interrupt
	# Arg 2 : Timer handle = 1
	# Arg 3 : Timer mode (0 = continuous, 1 = once-off)
	#
	# Note : The BLE module clocks oscillate at 32768Hz, so to set 
	#        the timer duration (Arg 1 ) using :
	#
	#        Arg 1 = (Timer Duration in seconds) * 32768
	#
	# We will use a 0.01 second interrupt so that the potentiometer 
	# changes reflect quickly, so
	#
	# Arg1 = 0.1 * 32768 = 327
	call hardware_set_soft_timer(3276, 1, 0)
end

# Timer event listener
event hardware_soft_timer(handle)

	# Make sure that the correct timer 
	# triggered the interrupt
	if (handle = 1) then 
		# Read in the ADC value
		#
		# For all input arguments, see the Bluegiga API refernece at:
		#
		# https://www.bluegiga.com/en-US/products/software-bluegiga-bluetooth-smart/
		#
		# Arg 1 : Input      : Using analog input 6 
		# Arg 2 : Decimation : 3 (12 Bit resolution)
		# Arg 3 : Reference  : 0 (1.24V internal reference) 
		#
		# note : result will be 16 bits stored in msb and must be shifted 
		#        to be on the range [-2048, 2048].
		#        this must then be converted to the range [0, 100] to display
		#        the percentage of the potentiometer
		call hardware_adc_read(6, 3, 0)
	end if 	
end

# ADC event listener
event hardware_adc_result(input, value)
	
	# The result will be 16 bits stored left aligned and must be shifted 
	# to the right by 4 bits to be on the range [-2048, 2048].
	# 
	# This must then be converted to the range [0, 100] to display
	# the percentage of the potentiometer
	voltage =  ( value >> 4 ) + 2048 

	# If thousands are less than 100, make thousands 0
	if voltage < 1000 then 
		thousands = 0
	else 
		thousands = voltage / 1000 
 
	end if 	

	# Get decimals from 0 - 4096 format
	hundreds  = ( voltage - ( thousands * 1000 ) ) / 100 
    tens      = ( voltage - ( thousands * 1000 + hundreds * 100 ) ) / 10 
    ones      =   voltage - ( thousands * 1000 + hundreds * 100 + tens * 10 )  

	if voltage > 4096 then 
		# Check that the voltage isn't out of range
		thousands = 0 
	end if 

	# Convert to asci
	result( 0 : 1 ) = thousands + 48
	result( 1 : 1 ) = hundreds + 48
	result( 2 : 1 ) = tens + 48
    result( 3 : 1 ) = ones +48

	# Write the voltage value to the UART connection
	call system_endpoint_tx( 5, 12, "Pot value : " )
	call system_endpoint_tx( 5, 4, result( 0 : 4 ) )
	call system_endpoint_tx( 5, 2, "\n\r" )
end
